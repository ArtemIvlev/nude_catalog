import os
import cv2
import logging
import argparse
from detect_nude.face_detector import FaceDetector

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ú–∞—Å—Å–∏–≤ —Å –ø—É—Ç—è–º–∏ –∫ —Ç–µ—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–∞–º
TEST_FILES = [
    "/mnt/smb/OneDrive/Pictures/!–§–æ—Ç–æ—Å–µ—Å—Å–∏–∏/–í–∞—Å–∏–ª–∏—Å–∞ –ê–Ω–∏–∫–∏–Ω–∞/_DSC9336.jpg",
    "/mnt/smb/OneDrive/Pictures/!–§–æ—Ç–æ—Å–µ—Å—Å–∏–∏/–ö—Å—é (@ksu_oh)/–î–æ–º–∞—à–∫–∞2_–ö—É—Ö–Ω—è/_DSC9610.jpg",
    "/mnt/smb/OneDrive/Pictures/!–§–æ—Ç–æ—Å–µ—Å—Å–∏–∏/–ö—Å—é (@ksu_oh)/–î–æ–º–∞—à–∫–∞2_–ö—É—Ö–Ω—è/_DSC9632.jpg",
    "/mnt/smb/OneDrive/Pictures/!–§–æ—Ç–æ—Å–µ—Å—Å–∏–∏/–ö—Å—é (@ksu_oh)/–î–æ–º–∞—à–∫–∞2_–ö—É—Ö–Ω—è/_DSC9600.jpg",
    "/mnt/smb/OneDrive/Pictures/!–§–æ—Ç–æ—Å–µ—Å—Å–∏–∏/–ö—Å—é (@ksu_oh)/–î–æ–º–∞—à–∫–∞2_–ö—É—Ö–Ω—è/_DSC9617.jpg",
    "/mnt/smb/OneDrive/Pictures/!–§–æ—Ç–æ—Å–µ—Å—Å–∏–∏/–ö—Å—é (@ksu_oh)/–î–æ–º–∞—à–∫–∞2_–ö—É—Ö–Ω—è/_DSC9580.jpg",
    "/mnt/smb/OneDrive/Pictures/!–§–æ—Ç–æ—Å–µ—Å—Å–∏–∏/–ö—Å—é (@ksu_oh)/–î–æ–º–∞—à–∫–∞2_–ö—É—Ö–Ω—è/_DSC9583.jpg",
    "/mnt/smb/OneDrive/Pictures/!–§–æ—Ç–æ—Å–µ—Å—Å–∏–∏/–ö—Å—é (@ksu_oh)/–î–æ–º–∞—à–∫–∞2_–ö—É—Ö–Ω—è/_DSC9626.jpg",
    "/mnt/smb/OneDrive/Pictures/!–§–æ—Ç–æ—Å–µ—Å—Å–∏–∏/–ö—Å—é (@ksu_oh)/–î–æ–º–∞—à–∫–∞2_–ö—É—Ö–Ω—è/_DSC9615.jpg",
    "/mnt/smb/OneDrive/Pictures/!–§–æ—Ç–æ—Å–µ—Å—Å–∏–∏/–ö—Å—é (@ksu_oh)/–î–æ–º–∞—à–∫–∞2_–ö—É—Ö–Ω—è/_DSC9667.jpg",
    "/mnt/smb/OneDrive/Pictures/!–§–æ—Ç–æ—Å–µ—Å—Å–∏–∏/–ö—Å—é (@ksu_oh)/–î–æ–º–∞—à–∫–∞2_–ö—É—Ö–Ω—è/_DSC9594.jpg",
    "/mnt/smb/OneDrive/Pictures/!–§–æ—Ç–æ—Å–µ—Å—Å–∏–∏/–ö—Å—é (@ksu_oh)/–î–æ–º–∞—à–∫–∞2_–ö—É—Ö–Ω—è/_DSC9652.jpg"
]

def test_face_detection(image_path):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ª–∏—Ü –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    
    Args:
        image_path: –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(image_path):
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {image_path}")
            return False
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = cv2.imread(image_path)
        if image is None:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
            return False
            
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        height, width = image.shape[:2]
        logger.info(f"üìè –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {width}x{height}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä –ª–∏—Ü
        face_detector = FaceDetector()
        
        # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –ª–∏—Ü–∞
        result = face_detector.detect_faces(image)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        face_count = result.get('face_count', 0)
        face_locations = result.get('face_locations', [])
        face_angles = result.get('face_angles', [])
        
        logger.info(f"üë• –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ª–∏—Ü: {face_count}")
        
        if face_count > 0:
            logger.info("üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ª–∏—Ü:")
            for i, (x, y, w, h) in enumerate(face_locations):
                logger.info(f"  –õ–∏—Ü–æ {i+1}: x={x}, y={y}, —à–∏—Ä–∏–Ω–∞={w}, –≤—ã—Å–æ—Ç–∞={h}")
                
            if face_angles:
                logger.info("üîÑ –£–≥–ª—ã –ø–æ–≤–æ—Ä–æ—Ç–∞ –ª–∏—Ü:")
                for i, angle in enumerate(face_angles):
                    logger.info(f"  –õ–∏—Ü–æ {i+1}: {angle:.2f}¬∞")
        
        # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for (x, y, w, h) in face_locations:
            cv2.rectangle(image, (x, y), (x+w, y+h), (0, 255, 0), 2)
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        output_path = os.path.splitext(image_path)[0] + "_faces.jpg"
        cv2.imwrite(output_path, image)
        logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        return False

def test_all_files():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞ TEST_FILES
    """
    total_files = len(TEST_FILES)
    success_count = 0
    
    logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {total_files} —Ñ–∞–π–ª–æ–≤")
    
    for i, file_path in enumerate(TEST_FILES, 1):
        logger.info(f"\n[{i}/{total_files}] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {os.path.basename(file_path)}")
        if test_face_detection(file_path):
            success_count += 1
    
    logger.info(f"\nüìä –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    logger.info(f"  - –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
    logger.info(f"  - –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}")
    logger.info(f"  - –û—à–∏–±–æ–∫: {total_files - success_count}")

def main():
    parser = argparse.ArgumentParser(description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ª–∏—Ü")
    parser.add_argument("--image", help="–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    parser.add_argument("--all", action="store_true", help="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞ TEST_FILES")
    args = parser.parse_args()
    
    if args.all:
        test_all_files()
    elif args.image:
        test_face_detection(args.image)
    else:
        parser.print_help()

if __name__ == "__main__":
    main() 