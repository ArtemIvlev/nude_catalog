import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ nude_catalog
root_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
sys.path.insert(0, root_dir)

import cv2
import numpy as np
from PIL import Image
import torch
import hashlib
from tqdm import tqdm
from face_detector import FaceDetector
from datetime import datetime
import tensorflow as tf
import logging
from nsfw_detector import MarqoNSFWDetector
from clip_classifier import CLIPNudeChecker
from opennsfw2_detector import OpenNSFW2Detector
from face_detector import FaceDetector
from concurrent.futures import ProcessPoolExecutor, as_completed
import multiprocessing
import gc
from PIL.ExifTags import TAGS
import time
import imagehash

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL
from config import PHOTO_DIR, TABLE_NAME, MIN_IMAGE_SIZE, MAX_IMAGE_SIZE, MAX_WORKERS, LOG_DIR
from detect_nude.postgres_db import connect_db, ensure_table_schema, insert_or_update_photo, get_photo_by_path

logger = logging.getLogger(__name__)

sys.path.append("./")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ TensorFlow –¥–ª—è GPU
physical_devices = tf.config.list_physical_devices('GPU')
if physical_devices:
    try:
        # –í–∫–ª—é—á–∞–µ–º –ø–∞–º—è—Ç—å GPU –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
        for device in physical_devices:
            tf.config.experimental.set_memory_growth(device, True)
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(physical_devices)} GPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
    except RuntimeError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ GPU: {e}")
else:
    logger.warning("‚ö†Ô∏è GPU –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
tf.config.optimizer.set_jit(True)  # –í–∫–ª—é—á–∞–µ–º XLA –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
tf.config.optimizer.set_experimental_options({
    'layout_optimizer': True,
    'constant_folding': True,
    'shape_optimization': True,
    'remapping': True,
    'arithmetic_optimization': True,
    'dependency_optimization': True,
    'loop_optimization': True,
    'function_optimization': True,
    'debug_stripper': True,
})

logger.info("‚úÖ TensorFlow –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ CPU")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π...")
nsfw_detector = MarqoNSFWDetector()
opennsfw2_detector = OpenNSFW2Detector()
face_detector = FaceDetector()
logger.info("‚úÖ –ú–æ–¥–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

def get_image_dates(image_path):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É —Å—ä–µ–º–∫–∏ –∏ –¥–∞—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Args:
        image_path: –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        
    Returns:
        tuple: (–¥–∞—Ç–∞_—Å—ä–µ–º–∫–∏, –¥–∞—Ç–∞_–∏–∑–º–µ–Ω–µ–Ω–∏—è) –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        mtime = os.path.getmtime(image_path)
        modification_date = datetime.fromtimestamp(mtime).isoformat()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É —Å—ä–µ–º–∫–∏ –∏–∑ EXIF
        with Image.open(image_path) as img:
            exif = img._getexif()
            if exif:
                # –ò—â–µ–º —Ç–µ–≥–∏ —Å –¥–∞—Ç–æ–π
                for tag_id in exif:
                    tag = TAGS.get(tag_id, tag_id)
                    if tag == 'DateTimeOriginal':
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ ISO —Ñ–æ—Ä–º–∞—Ç
                        date_str = exif[tag_id]
                        try:
                            shooting_date = datetime.strptime(date_str, '%Y:%m:%d %H:%M:%S').isoformat()
                            return shooting_date, modification_date
                        except ValueError:
                            pass
                    elif tag == 'DateTimeDigitized':
                        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–≥ –¥–∞—Ç—ã
                        date_str = exif[tag_id]
                        try:
                            shooting_date = datetime.strptime(date_str, '%Y:%m:%d %H:%M:%S').isoformat()
                            return shooting_date, modification_date
                        except ValueError:
                            pass
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¥–∞—Ç—É —Å—ä–µ–º–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏—è
        return modification_date, modification_date
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {str(e)}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        current_date = datetime.now().isoformat()
        return current_date, current_date

def compute_sha256(filepath):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ SHA256 —Ö–µ—à–∞ —Ñ–∞–π–ª–∞"""
    with open(filepath, "rb") as f:
        return hashlib.sha256(f.read()).hexdigest()

def is_valid_path(path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if '\0' in path:
        logger.error(f"‚ùå –ù—É–ª–µ–≤–æ–π —Å–∏–º–≤–æ–ª –≤ –ø—É—Ç–∏: {path}")
        return False
    return True

def normalize_path(path):
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏"""
    normalized_path = os.path.normpath(path)
    normalized_path = normalized_path.replace('\0', '')
    return normalized_path

def find_all_jpgs(directory):
    """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö JPG —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    for root, _, files in os.walk(directory):
        for file in files:
            path = os.path.join(root, file)
            normalized_path = normalize_path(path)
            if file.lower().endswith(".jpg") and is_valid_path(normalized_path):
                yield normalized_path

def get_image_dimensions(image_path):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    with Image.open(image_path) as img:
        return img.size

def check_image_size(image_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        width, height = get_image_dimensions(image_path)
        return (MIN_IMAGE_SIZE <= width <= MAX_IMAGE_SIZE and 
                MIN_IMAGE_SIZE <= height <= MAX_IMAGE_SIZE)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        return False

def is_normal_size(width, height):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    return (MIN_IMAGE_SIZE <= width <= MAX_IMAGE_SIZE and 
            MIN_IMAGE_SIZE <= height <= MAX_IMAGE_SIZE)

def is_image_small(image_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–ª–µ–Ω—å–∫–∏–º"""
    size = get_image_dimensions(image_path)
    if size:
        width, height = size
        return 1 if width < MIN_IMAGE_SIZE or height < MIN_IMAGE_SIZE else 0
    return 0

def analyze_photo(image_path):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ NSFW –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = cv2.imread(image_path)
        if image is None:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
            return None
            
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        height, width = image.shape[:2]
        channels = image.shape[2] if len(image.shape) > 2 else 1
        
        # –í—ã—á–∏—Å–ª—è–µ–º phash
        try:
            pil_image = Image.fromarray(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
            phash = str(imagehash.average_hash(pil_image))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ phash: {str(e)}")
            phash = None
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º NSFW –∫–æ–Ω—Ç–µ–Ω—Ç
        nsfw_result = nsfw_detector.analyze_image(image_path)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ NSFW –∞–Ω–∞–ª–∏–∑–∞
        nsfw_score = nsfw_result.get('nsfw_score', 0.0)
        is_nsfw = nsfw_result.get('is_nsfw', False)
        confidence = nsfw_result.get('confidence', 0.0)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º OpenNSFW2
        opennsfw2_result = opennsfw2_detector.analyze_image(image_path)
        
        # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –ª–∏—Ü–∞
        result = face_detector.detect_faces(image)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        face_count = result.get('face_count', 0)
        face_locations = result.get('face_locations', [])
        face_angles = result.get('face_angles', [])
        
        logger.info(f"üë• –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ª–∏—Ü: {face_count}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result = {
            'nsfw_score': nsfw_score,
            'is_erotic': is_nsfw,
            'confidence': confidence,
            'details': {
                'nsfw_analysis': nsfw_result,
                'opennsfw2_analysis': opennsfw2_result
            },
            'face_count': face_count,
            'face_locations': face_locations,
            'face_angles': face_angles,
            'face_landmarks': [],
            'phash': phash
        }
        
        return result
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        return None

def process_image(image_path):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
    
    Args:
        image_path: –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        
    Returns:
        dict: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if not check_image_size(image_path):
            logger.warning(f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –∏–ª–∏ –±–æ–ª—å—à–æ–µ: {image_path}")
            return None
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        shooting_date, modification_date = get_image_dates(image_path)
            
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ
        result = analyze_photo(image_path)
        if result is None:
            return None
            
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        nsfw_score = float(result.get('nsfw_score', 0.0))
        is_erotic = bool(result.get('is_erotic', False))
        confidence = float(result.get('confidence', 0.0))
        face_count = int(result.get('face_count', 0))
        phash = result.get('phash', '')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        is_nsfw = nsfw_score > 0.5 or is_erotic
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—Ç OpenNSFW2, —É—á–∏—Ç—ã–≤–∞–µ–º –∏—Ö
        clip_nude_score = 0.0
        if 'details' in result and 'opennsfw2_analysis' in result['details']:
            clip_nude_score = float(result['details']['opennsfw2_analysis'].get('nsfw_score', 0.0))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_result = {
            'is_nsfw': is_nsfw,
            'nsfw_score': nsfw_score,
            'clip_nude_score': clip_nude_score,
            'face_count': face_count,
            'confidence': confidence,
            'shooting_date': shooting_date,
            'modification_date': modification_date,
            'phash': phash
        }
        
        return final_result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        return None

def process_directory(directory_path):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    
    Args:
        directory_path: –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    """
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = connect_db()
        if not conn:
            return
            
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        ensure_table_schema(conn)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö jpg —Ñ–∞–π–ª–æ–≤
        image_paths = list(find_all_jpgs(directory_path))
        total_images = len(image_paths)
        
        if total_images == 0:
            logger.info("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        logger.info(f"üì∏ –ù–∞–π–¥–µ–Ω–æ {total_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        cursor = conn.cursor()
        cursor.execute(f"SELECT path FROM {TABLE_NAME}")
        processed_paths = {row[0] for row in cursor.fetchall()}
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        skipped_count = 0
        processed_count = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        with tqdm(total=total_images, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π") as pbar:
            for path in image_paths:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–∑–µ
                    if path in processed_paths:
                        skipped_count += 1
                        pbar.update(1)
                        continue
                        
                    result = process_image(path)
                    if result:
                        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        is_nsfw = result.get('is_nsfw', False)
                        nsfw_score = result.get('nsfw_score', 0.0)
                        face_count = result.get('face_count', 0)
                        clip_nude_score = result.get('clip_nude_score', 0.0)
                        shooting_date = result.get('shooting_date', '')
                        modification_date = result.get('modification_date', '')
                        phash = result.get('phash', '')
                        
                        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
                        photo_data = {
                            'path': path,
                            'is_nude': int(is_nsfw),
                            'has_face': int(face_count > 0),
                            'hash_sha256': compute_sha256(path),
                            'clip_nude_score': clip_nude_score,
                            'nsfw_score': nsfw_score,
                            'is_small': is_image_small(path),
                            'status': 'review',
                            'phash': phash,
                            'shooting_date': shooting_date,
                            'modification_date': modification_date
                        }
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
                        insert_or_update_photo(conn, photo_data)
                        processed_count += 1
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {path}: {str(e)}")
                    
                pbar.update(1)
                
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        logger.info(f"   - –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –≤ –±–∞–∑–µ): {skipped_count}")
        logger.info(f"   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤—ã—Ö: {processed_count}")
        logger.info(f"   - –í—Å–µ–≥–æ: {total_images}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {str(e)}")
    finally:
        if conn:
            conn.close()

def main():
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists(LOG_DIR):
        os.makedirs(LOG_DIR)
        
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
    current_date = datetime.now().strftime('%Y-%m-%d')
    log_file = os.path.join(LOG_DIR, f'detect_nude_{current_date}.log')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_file, encoding='utf-8'),
            logging.StreamHandler()  # –î–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
        ]
    )
    
    logger.info(f"üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ {log_file}")
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        process_directory(PHOTO_DIR)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        global nsfw_detector, opennsfw2_detector, face_detector
        del nsfw_detector
        del opennsfw2_detector
        del face_detector
        gc.collect()
        tf.keras.backend.clear_session()

if __name__ == "__main__":
    main() 