import torch
from transformers import AutoImageProcessor, AutoModelForImageClassification
from huggingface_hub import snapshot_download
import argparse

MODEL_NAME = "Falconsai/nsfw_image_detection"

def show_model_info(force_reload=False):
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞)
    if force_reload:
        print("üì¶ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å Hugging Face...")
        snapshot_download(MODEL_NAME, local_files_only=False, force_download=True)

    print(f"üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏: {MODEL_NAME}")
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    print(f"üíª –ò—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")

    try:
        processor = AutoImageProcessor.from_pretrained(MODEL_NAME)
        model = AutoModelForImageClassification.from_pretrained(MODEL_NAME)
        model.to(device)
        model.eval()

        print("\nüìã –ö–ª–∞—Å—Å—ã (id2label):")
        for idx, label in model.config.id2label.items():
            print(f"  {idx}: {label}")

        print("\nüß† –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏:")
        print(model.__class__.__name__)
        print(f"üî¢ –ö–æ–ª-–≤–æ –≤—ã—Ö–æ–¥–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤: {model.config.num_labels}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {str(e)}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ Falconsai NSFW")
    parser.add_argument("--reload", action="store_true", help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å —Å Hugging Face")
    args = parser.parse_args()

    show_model_info(force_reload=args.reload)
