import os
import sys
import cv2
import numpy as np
from PIL import Image
import sqlite3
import torch
import hashlib
from tqdm import tqdm
from face_detector import FaceDetector
from datetime import datetime
import tensorflow as tf
import logging
from nsfw_detector import MarqoNSFWDetector
from clip_classifier import CLIPNudeChecker
from opennsfw2_detector import OpenNSFW2Detector
from face_detector import FaceDetector

logger = logging.getLogger(__name__)

sys.path.append("./")

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
PHOTO_DIR = r"/mnt/smb/OneDrive/Pictures/!–§–æ—Ç–æ—Å–µ—Å—Å–∏–∏/"
DB_FILE = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "DB", "database.db"))
TABLE_NAME = "photos_ok"
MIN_IMAGE_SIZE = 100
MAX_IMAGE_SIZE = 10000

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
def connect_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(DB_FILE)
        return conn
    except sqlite3.Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

def ensure_table_schema(conn):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    cursor = conn.cursor()
    cursor.execute(f'''
    CREATE TABLE IF NOT EXISTS {TABLE_NAME} (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        path TEXT UNIQUE,
        is_nude INTEGER,
        has_face INTEGER,
        hash_sha256 TEXT,
        clip_nude_score REAL,
        nsfw_score REAL,
        status TEXT DEFAULT 'new',
        is_small INTEGER,
        phash TEXT,
        views INTEGER,
        forwards INTEGER,
        reactions INTEGER,
        predicted_likes INTEGER,
        subscribers INTEGER,
        normalized_views REAL,
        normalized_forwards REAL,
        publication_date TEXT,
        message_id TEXT
    )
    ''')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    existing_columns = set(
        row[1] for row in cursor.execute(f"PRAGMA table_info({TABLE_NAME})")
    )
    expected_columns = {
        'clip_nude_score': "REAL",
        'nsfw_score': "REAL",
        'status': "TEXT DEFAULT 'new'",
        'is_small': "INTEGER",
        'phash': "TEXT",
        'views': "INTEGER",
        'forwards': "INTEGER",
        'reactions': "INTEGER",
        'predicted_likes': "INTEGER",
        'subscribers': "INTEGER",
        'normalized_views': "REAL",
        'normalized_forwards': "REAL",
        'publication_date': "TEXT",
        'message_id': "TEXT"
    }
    
    for col, coltype in expected_columns.items():
        if col not in existing_columns:
            cursor.execute(f"ALTER TABLE {TABLE_NAME} ADD COLUMN {col} {coltype}")
    
    conn.commit()

# === –£—Ç–∏–ª–∏—Ç—ã ===
def compute_sha256(filepath):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ SHA256 —Ö–µ—à–∞ —Ñ–∞–π–ª–∞"""
    with open(filepath, "rb") as f:
        return hashlib.sha256(f.read()).hexdigest()

def is_valid_path(path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if '\0' in path:
        logger.error(f"‚ùå –ù—É–ª–µ–≤–æ–π —Å–∏–º–≤–æ–ª –≤ –ø—É—Ç–∏: {path}")
        return False
    return True

def normalize_path(path):
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏"""
    normalized_path = os.path.normpath(path)
    normalized_path = normalized_path.replace('\0', '')
    return normalized_path

def find_all_jpgs(directory):
    """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö JPG —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    for root, _, files in os.walk(directory):
        for file in files:
            path = os.path.join(root, file)
            normalized_path = normalize_path(path)
            if file.lower().endswith(".jpg") and is_valid_path(normalized_path):
                yield normalized_path

def get_image_dimensions(image_path):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    with Image.open(image_path) as img:
        return img.size

def check_image_size(image_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        width, height = get_image_dimensions(image_path)
        return (MIN_IMAGE_SIZE <= width <= MAX_IMAGE_SIZE and 
                MIN_IMAGE_SIZE <= height <= MAX_IMAGE_SIZE)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        return False

def is_normal_size(width, height):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    return (MIN_IMAGE_SIZE <= width <= MAX_IMAGE_SIZE and 
            MIN_IMAGE_SIZE <= height <= MAX_IMAGE_SIZE)

def is_image_small(image_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–ª–µ–Ω—å–∫–∏–º"""
    size = get_image_dimensions(image_path)
    if size:
        width, height = size
        return 1 if width < MIN_IMAGE_SIZE or height < MIN_IMAGE_SIZE else 0
    return 0

def analyze_photo(image_path):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ NSFW –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = cv2.imread(image_path)
        if image is None:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
            return None
            
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        height, width = image.shape[:2]
        channels = image.shape[2] if len(image.shape) > 2 else 1
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º NSFW –∫–æ–Ω—Ç–µ–Ω—Ç
        nsfw_detector = MarqoNSFWDetector()
        nsfw_result = nsfw_detector.analyze_image(image_path)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ NSFW –∞–Ω–∞–ª–∏–∑–∞
        nsfw_score = nsfw_result.get('nsfw_score', 0.0)
        is_nsfw = nsfw_result.get('is_nsfw', False)
        confidence = nsfw_result.get('confidence', 0.0)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º OpenNSFW2
        opennsfw2_detector = OpenNSFW2Detector()
        opennsfw2_result = opennsfw2_detector.analyze_image(image_path)
        

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä –ª–∏—Ü
        face_detector = FaceDetector()
        
        # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –ª–∏—Ü–∞
        result = face_detector.detect_faces(image)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        face_count = result.get('face_count', 0)
        face_locations = result.get('face_locations', [])
        face_angles = result.get('face_angles', [])
        
        logger.info(f"üë• –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ª–∏—Ü: {face_count}")
        
   

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result = {
            'nsfw_score': nsfw_score,
            'is_erotic': is_nsfw,
            'confidence': confidence,
            'details': {
                'nsfw_analysis': nsfw_result,
                'opennsfw2_analysis': opennsfw2_result
            },
            'face_count': face_count,
            'face_locations': face_locations,
            'face_angles': face_angles,
            'face_landmarks': []
        }
        
        return result
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        return None

def process_image(image_path):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
    
    Args:
        image_path: –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        
    Returns:
        dict: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if not check_image_size(image_path):
            logger.warning(f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –∏–ª–∏ –±–æ–ª—å—à–æ–µ: {image_path}")
            return None
            
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ
        result = analyze_photo(image_path)
        if result is None:
            return None
            
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        nsfw_score = float(result['nsfw_score'])
        is_erotic = bool(result['is_erotic'])
        confidence = float(result['confidence'])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        is_nsfw = nsfw_score > 0.5 or is_erotic
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—Ç OpenNSFW2, —É—á–∏—Ç—ã–≤–∞–µ–º –∏—Ö
        if 'details' in result and 'opennsfw2_analysis' in result['details']:
            opennsfw2_score = result['details']['opennsfw2_analysis'].get('nsfw_score', 0.0)
            # –ï—Å–ª–∏ OpenNSFW2 —Å—á–∏—Ç–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ NSFW —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
            if opennsfw2_score > 0.8:
                is_nsfw = True
                confidence = max(confidence, opennsfw2_score)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = 'unsafe' if is_nsfw else 'safe'
        
        return {
            'path': image_path,
            'category': category,
            'nsfw_score': nsfw_score,
            'is_erotic': is_erotic,
            'confidence': confidence,
            'face_count': result.get('face_count', 0),
            'face_locations': result.get('face_locations', []),
            'face_angles': result.get('face_angles', []),
            'face_landmarks': result.get('face_landmarks', []),
            'details': result.get('details', {})
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {image_path}: {str(e)}")
        return None

def print_result(result):
    """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    if result:
        print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {result['path']}")
        print(f"–†–∞–∑–º–µ—Ä—ã: {result['dimensions']['width']}x{result['dimensions']['height']}")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: {result['dimensions']['channels']}")
        
        # NSFW –∞–Ω–∞–ª–∏–∑
        nsfw_analysis = result['details']['nsfw_analysis']
        print(f"–ú–æ–¥–µ–ª—å: {nsfw_analysis.get('model', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"NSFW –∞–Ω–∞–ª–∏–∑: {'NSFW' if nsfw_analysis['is_nsfw'] else '–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ'}")
        print(f"NSFW –æ—Ü–µ–Ω–∫–∞: {nsfw_analysis['nsfw_score']:.4f}")
        print(f"–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {nsfw_analysis['safe_score']:.4f}")
        print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {nsfw_analysis['confidence']:.4f}")
        print("–î–µ—Ç–∞–ª–∏ NSFW:")
        for class_name, score in nsfw_analysis['details'].items():
            print(f"  {class_name}: {score:.4f}")
        
        # OpenNSFW2 –∞–Ω–∞–ª–∏–∑
        opennsfw2_analysis = result['details']['opennsfw2_analysis']
        print("OpenNSFW2 –∞–Ω–∞–ª–∏–∑:")
        print(f"  NSFW: {opennsfw2_analysis['nsfw_score']:.4f}")
        print(f"  –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ: {opennsfw2_analysis['safe_score']:.4f}")
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

def process_directory(directory_path):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    
    Args:
        directory_path: –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    """
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    conn = connect_db()
    if not conn:
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    ensure_table_schema(conn)
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    try:
        all_files = list(find_all_jpgs(directory_path))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
        return
        
    total_files = len(all_files)
    processed = 0
    safe_count = 0
    unsafe_count = 0
    
    logger.info(f"\nüîç –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for path in tqdm(all_files, desc="üî¨ –ê–Ω–∞–ª–∏–∑"):
        processed += 1
        
        # –ü—Ä–æ–ø—É—Å–∫, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
        cursor.execute(f"SELECT id FROM {TABLE_NAME} WHERE path = ?", (path,))
        if cursor.fetchone():
            continue
        
        logger.info(f"[{processed}/{total_files}] –û–±—Ä–∞–±–æ—Ç–∫–∞: {os.path.basename(path)}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à
        sha256 = compute_sha256(path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result = process_image(path)
        if result:
            is_safe = not result['is_erotic']
            nsfw_score = result['nsfw_score']
            confidence = result['confidence']
            face_count = result['face_count']
            
            # –ü–æ–ª—É—á–∞–µ–º opennsfw2_score
            opennsfw2_score = 0.0
            if 'details' in result and 'opennsfw2_analysis' in result['details']:
                opennsfw2_score = result['details']['opennsfw2_analysis'].get('nsfw_score', 0.0)
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            if is_safe:
                safe_count += 1
            else:
                unsafe_count += 1
            
            logger.info(f"path {path}")
            logger.info(f"is_safe {is_safe}")
            logger.info(f"confidence {confidence}")
            logger.info(f"face_count {face_count}")
            logger.info(f"opennsfw2_score {opennsfw2_score}")
            
            logger.info(f"--------------------------------")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–∏—Ü–∞
            has_face = face_count > 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –º–∞–ª–µ–Ω—å–∫–æ–µ –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            is_small = is_image_small(path)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
            try:
                status = 'review'
                
                cursor.execute(f'''
                    INSERT INTO {TABLE_NAME}
                    (path, is_nude, has_face, hash_sha256, clip_nude_score, nsfw_score, is_small, status)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                ''', (path, int(not is_safe), has_face, sha256, opennsfw2_score, nsfw_score, is_small, status))
                
                conn.commit()
                
                # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                status_text = "‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ" if is_safe else "‚ùå –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ"
                logger.info(f"  {status_text} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f})")
                    
            except sqlite3.Error as e:
                logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ë–î: {e}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {path}")
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    logger.info("\nüìä –ò—Ç–æ–≥–∏:")
    logger.info(f"  - –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_files}")
    logger.info(f"  - –ë–µ–∑–æ–ø–∞—Å–Ω–æ: {safe_count}")
    logger.info(f"  - –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ: {unsafe_count}")
    
    conn.close()

def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    if len(sys.argv) > 1:
        directory_path = sys.argv[1]
    else:
        directory_path = PHOTO_DIR
        
    if not os.path.isdir(directory_path):
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {directory_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π")
        return
        
    process_directory(directory_path)

if __name__ == "__main__":
    main()
