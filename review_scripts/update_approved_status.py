#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import sqlite3
import logging
import re
from datetime import datetime
from tqdm import tqdm

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DB_FILE = os.path.abspath(os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "DB", "database.db"))
TABLE_NAME = "photos_ok"
APPROVED_DIR = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "approved_photos")

def connect_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(DB_FILE)
        return conn
    except sqlite3.Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

def ensure_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
    os.makedirs(APPROVED_DIR, exist_ok=True)
    logger.info(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: {APPROVED_DIR}")

def extract_hash_from_filename(filename):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ö–µ—à SHA-256 –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    
    Args:
        filename: –∏–º—è —Ñ–∞–π–ª–∞
        
    Returns:
        str: —Ö–µ—à SHA-256 –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å
    """
    try:
        # –ò—â–µ–º —Ö–µ—à –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (—Ñ–æ—Ä–º–∞—Ç: _DSCXXXX-Edit_—Ö–µ—à_phash.jpg –∏–ª–∏ _DSCXXXX-2_—Ö–µ—à_phash.jpg –∏–ª–∏ Studio Session-XXX_—Ö–µ—à_phash.jpg)
        match = re.search(r'[^_]_([a-f0-9]{64})_[a-f0-9]+\.jpg$', filename)
        if match:
            return match.group(1)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ö–µ—à–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ {filename}: {str(e)}")
    return None

def update_approved_status():
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ approved
    """
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = connect_db()
        if not conn:
            return
            
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        ensure_directories()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if not os.path.exists(APPROVED_DIR):
            logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {APPROVED_DIR} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ approved
        files = os.listdir(APPROVED_DIR)
        image_files = [f for f in files if f.endswith('.jpg')]
        
        if not image_files:
            logger.info("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ approved")
            return
            
        logger.info(f"üì∏ –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–æ—Ç–æ
        cursor = conn.cursor()
        updated_count = 0
        
        with tqdm(total=len(image_files), desc="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞") as pbar:
            for image_file in image_files:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–µ—à –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    hash_sha256 = extract_hash_from_filename(image_file)
                    
                    if hash_sha256:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î –ø–æ —Ö–µ—à—É
                        cursor.execute(f"""
                            UPDATE {TABLE_NAME}
                            SET status = 'approved'
                            WHERE hash_sha256 = ?
                        """, (hash_sha256,))
                        
                        if cursor.rowcount > 0:
                            updated_count += 1
                            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ö–µ—à–∞: {hash_sha256}")
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ö–µ—à –≤ –ë–î: {hash_sha256}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ö–µ—à –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {image_file}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {image_file}: {str(e)}")
                finally:
                    pbar.update(1)
        
        conn.commit()
        conn.close()
        
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        if conn:
            conn.close()

def main():
    try:
        update_approved_status()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main() 