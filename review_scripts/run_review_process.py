#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import logging
import subprocess
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü—É—Ç–∏ –∫ —Å–∫—Ä–∏–ø—Ç–∞–º
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
SELECT_SCRIPT = os.path.join(SCRIPT_DIR, "select_for_review.py")
UPDATE_SCRIPT = os.path.join(SCRIPT_DIR, "update_approved_status.py")

def run_script(script_path, description):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    
    Args:
        script_path: –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É
        description: –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
        
    Returns:
        bool: True, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    try:
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞: {description}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
        result = subprocess.run(
            [sys.executable, script_path],
            check=True,
            capture_output=True,
            text=True
        )
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info(f"‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: {description}")
        if result.stdout:
            logger.info(f"–í—ã–≤–æ–¥ —Å–∫—Ä–∏–ø—Ç–∞:\n{result.stdout}")
            
        return True
        
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ {description}: {e}")
        if e.stdout:
            logger.error(f"–í—ã–≤–æ–¥ —Å–∫—Ä–∏–ø—Ç–∞:\n{e.stdout}")
        if e.stderr:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞:\n{e.stderr}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ {description}: {e}")
        return False

def main():
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤
        if not os.path.exists(SELECT_SCRIPT):
            logger.error(f"‚ùå –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {SELECT_SCRIPT}")
            return
            
        if not os.path.exists(UPDATE_SCRIPT):
            logger.error(f"‚ùå –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {UPDATE_SCRIPT}")
            return
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ–≤—å—é
        select_success = run_script(SELECT_SCRIPT, "–í—ã–±–æ—Ä —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ–≤—å—é")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        update_success = run_script(UPDATE_SCRIPT, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ")
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if select_success and update_success:
            logger.info("‚úÖ –í—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main() 