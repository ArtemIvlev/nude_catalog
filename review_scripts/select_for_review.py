#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import sqlite3
import shutil
import logging
from datetime import datetime
from tqdm import tqdm
import imagehash
from PIL import Image

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DB_FILE = os.path.abspath(os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "DB", "database.db"))
TABLE_NAME = "photos_ok"
REVIEW_DIR = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "review_photos")
APPROVED_DIR = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "approved_photos")
DUPLICATES_DIR = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "duplicate_photos")

def connect_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(DB_FILE)
        return conn
    except sqlite3.Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

def ensure_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
    os.makedirs(REVIEW_DIR, exist_ok=True)
    os.makedirs(APPROVED_DIR, exist_ok=True)
    os.makedirs(DUPLICATES_DIR, exist_ok=True)
    logger.info(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã: {REVIEW_DIR}, {APPROVED_DIR}, {DUPLICATES_DIR}")

def hamming_distance(hash1, hash2):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –•—ç–º–º–∏–Ω–≥–∞ –º–µ–∂–¥—É –¥–≤—É–º—è —Ö–µ—à–∞–º–∏"""
    if not hash1 or not hash2:
        return float('inf')
    return sum(c1 != c2 for c1, c2 in zip(hash1, hash2))

def is_similar(hash1, hash2, threshold=5):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –¥–≤–∞ —Ö–µ—à–∞ –ø–æ—Ö–æ–∂–∏–º–∏"""
    return hamming_distance(hash1, hash2) <= threshold

def select_photos_for_review():
    """
    –í—ã–±–∏—Ä–∞–µ—Ç —Ñ–æ—Ç–æ —Å –º–µ—Ç–∫–∞–º–∏ –Ω—é–¥ –∏ –±–µ–∑ –ª–∏—Ü–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º review
    –∏ –∫–æ–ø–∏—Ä—É–µ—Ç –∏—Ö –≤ –ø–∞–ø–∫—É –Ω–∞ —Ä–µ–≤—å—é, –ø–æ—Ö–æ–∂–∏–µ —Ñ–æ—Ç–æ –∫–æ–ø–∏—Ä—É–µ—Ç –≤ –ø–∞–ø–∫—É –¥—É–±–ª–µ–π
    """
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = connect_db()
        if not conn:
            return
            
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        ensure_directories()
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ–≤—å—é
        cursor = conn.cursor()
        cursor.execute(f"""
            SELECT path, is_nude, has_face, nsfw_score, clip_nude_score, hash_sha256, phash
            FROM {TABLE_NAME}
            WHERE is_nude = 1 AND has_face = 0 AND status = 'review'
            ORDER BY nsfw_score DESC
        """)
        
        photos = cursor.fetchall()
        total_photos = len(photos)
        
        if total_photos == 0:
            logger.info("‚ùå –ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ–≤—å—é")
            return
            
        logger.info(f"üì∏ –ù–∞–π–¥–µ–Ω–æ {total_photos} —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ–≤—å—é")
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–≤—å—é
        copied_count = 0
        skipped_count = 0
        duplicate_count = 0
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ö–µ—à–µ–π
        processed_hashes = {}
        
        with tqdm(total=total_photos, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ") as pbar:
            for photo in photos:
                path, is_nude, has_face, nsfw_score, clip_nude_score, hash_sha256, phash = photo
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                    filename = os.path.basename(path)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–º
                    is_duplicate = False
                    for processed_phash in processed_hashes:
                        if is_similar(phash, processed_phash):
                            is_duplicate = True
                            break
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ö–µ—à–µ–º –∏ phash
                    new_filename = f"{os.path.splitext(filename)[0]}_{hash_sha256}_{phash}.jpg"
                    
                    if is_duplicate:
                        # –ö–æ–ø–∏—Ä—É–µ–º –≤ –ø–∞–ø–∫—É –¥—É–±–ª–µ–π
                        new_path = os.path.join(DUPLICATES_DIR, new_filename)
                        if not os.path.exists(new_path):
                            shutil.copy2(path, new_path)
                            duplicate_count += 1
                    else:
                        # –ö–æ–ø–∏—Ä—É–µ–º –≤ –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–≤—å—é
                        new_path = os.path.join(REVIEW_DIR, new_filename)
                        if not os.path.exists(new_path):
                            shutil.copy2(path, new_path)
                            copied_count += 1
                            # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                            processed_hashes[phash] = True
                        else:
                            skipped_count += 1
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ {path}: {str(e)}")
                finally:
                    pbar.update(1)
        
        conn.close()
        logger.info(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {copied_count}, –¥—É–±–ª–µ–π: {duplicate_count}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        if conn:
            conn.close()

def main():
    try:
        select_photos_for_review()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main() 